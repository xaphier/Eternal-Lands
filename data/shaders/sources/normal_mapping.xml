<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>normal_mapping</name>
 <types>
  <type>normal_mapping</type>
 </types>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_4</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>tbn_matrix</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec3 normal;

normal.xy = texture(effect_sampler_4, fragment_uv).rg * 2.0 - 1.0;
normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));

fragment_normal = tbn_matrix * normal;
</source>
   <version>130</version>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_4</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>tbn_matrix</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec3 normal;

normal.xy = texture2D(effect_sampler_4, fragment_uv).ga * 2.0 - 1.0;
normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));

fragment_normal = tbn_matrix * normal;
</source>
   <version>120</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

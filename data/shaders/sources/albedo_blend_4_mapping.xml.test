<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="9">
<shader_source class_id="0" tracking_level="0" version="1">
	<px class_id="1" tracking_level="1" version="0" object_id="_0">
		<types class_id="2" tracking_level="0" version="0">
			<count>1</count>
			<item_version>0</item_version>
			<item>14</item>
		</types>
		<name class_id="3" tracking_level="0" version="0">
			<str>blend_4</str>
		</name>
		<datas class_id="4" tracking_level="0" version="0">
			<count>2</count>
			<item_version>0</item_version>
			<item class_id="5" tracking_level="0" version="0">
				<parameters class_id="6" tracking_level="0" version="0">
					<count>12</count>
					<item_version>0</item_version>
					<item class_id="7" tracking_level="0" version="0">
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_0</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_1</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_2</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_3</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>blend_sampler</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>blend_sizes</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>4</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>material_color</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>output_data</str>
						</name>
						<type>15</type>
						<qualifier>1</qualifier>
						<size>5</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>world_extra_uv</str>
						</name>
						<type>13</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>world_extra_uv_ddx_ddy</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>world_uv</str>
						</name>
						<type>13</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>world_uv_ddx_ddy</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
				</parameters>
				<version>1</version>
				<source>
					<str>vec4 blend, tmp[4], extra_blend, min_blend, max_blend;
vec3 result;
vec2 ddx, ddy;
int i;

ddx = world_extra_uv_ddx_ddy.xy;
ddy = world_extra_uv_ddx_ddy.zw;

result = material_color.rgb;

blend = textureGrad(blend_sampler, world_uv, world_uv_ddx_ddy.xy, world_uv_ddx_ddy.zw);

if (any(greaterThan(blend, vec4(0.0))))
{
	tmp[0] = textureGrad(albedo_sampler_0, world_extra_uv, ddx, ddy);
	tmp[1] = textureGrad(albedo_sampler_1, world_extra_uv, ddx, ddy);
	tmp[2] = textureGrad(albedo_sampler_2, world_extra_uv, ddx, ddy);
	tmp[3] = textureGrad(albedo_sampler_3, world_extra_uv, ddx, ddy);

	for (i = 0; i &lt; 4; ++i)
	{
		extra_blend[i] = tmp[i].a;
	}

	min_blend = clamp(extra_blend - blend_sizes[0], 0.0, 1.0);
	max_blend = clamp(extra_blend + blend_sizes[0], 0.0, 1.0);

	blend = smoothstep(min_blend, max_blend, blend);

	for (i = 3; i &gt;= 0; --i)
	{
		result = mix(result, tmp[i].rgb, blend[i]);
	}
}

output_data[0].rgb = result;
output_data[0].a = 1.0;
</str>
				</source>
			</item>
			<item>
				<parameters>
					<count>10</count>
					<item_version>0</item_version>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_0</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_1</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_2</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_3</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>blend_sampler</str>
						</name>
						<type>26</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>blend_sizes</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>4</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>material_color</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>output_data</str>
						</name>
						<type>15</type>
						<qualifier>1</qualifier>
						<size>5</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>world_extra_uv</str>
						</name>
						<type>13</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>blend_4_albedo_mapping</str>
						</source>
						<name>
							<str>world_uv</str>
						</name>
						<type>13</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
				</parameters>
				<version>0</version>
				<source>
					<str>vec4 blend, tmp[4], extra_blend;
vec3 result;
int i;

result = material_color.rgb;

blend = texture2D(blend_sampler, world_uv);

tmp[0] = texture2D(albedo_sampler_0, world_extra_uv);
tmp[1] = texture2D(albedo_sampler_1, world_extra_uv);
tmp[2] = texture2D(albedo_sampler_2, world_extra_uv);
tmp[3] = texture2D(albedo_sampler_3, world_extra_uv);

for (i = 0; i &lt; 4; ++i)
{
	extra_blend[i] = tmp[i].a;
}

blend = smoothstep(extra_blend - blend_sizes[0], extra_blend + blend_sizes[0], blend);

for (i = 3; i &gt;= 0; --i)
{
	result = mix(result, tmp[i].rgb, blend[i]);
}

output_data[0].rgb = result;
output_data[0].a = 1.0;
</str>
				</source>
			</item>
		</datas>
	</px>
</shader_source>
</boost_serialization>


<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>specular</name>
 <type>light</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>diffuse_color</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>light_color</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>light_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>roughness</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>specular_color</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_view_direction</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec3 dir, reflect_dir, h;
float dist, scale, nxdir, diffuse, specular, hxdir, exponent, n_dot_h, n_dot_l, l_dot_h;

dir = light_position.xyz - world_position * light_color.a;
dist = dot(dir, dir);
dir *= inversesqrt(dist);

h = normalize(world_view_direction.xyz + dir);

n_dot_l = max(0.0, dot(fragment_normal, dir));
n_dot_h = max(0.0, dot(fragment_normal, h));
l_dot_h = max(0.0, dot(dir, h));

nxdir = max(0.0, dot(fragment_normal, dir));
scale = max(0.0, 1.0 - dist * light_position.w);
diffuse = scale * nxdir;

diffuse_color = vec3(0.0);
specular_color = vec3(0.0);

if (diffuse &gt; 0.0)
{
	exponent = exp2(12.0 * roughness);

	specular = ((1.0 + exponent) / (8.0 * pow(l_dot_h, 3.0))) * pow(n_dot_h, exponent) * n_dot_l * scale;

	diffuse_color += light_color.rgb * diffuse;
	specular_color += light_color.rgb * specular;
}
</source>
   <version>120</version>
   <shader_types>fragment</shader_types>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>diffuse_color</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>light_color</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>light_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>specular_color</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec3 dir;
float dist, scale, nxdir;

dir = light_position.xyz - world_position * light_color.a;
dist = dot(dir, dir);
dir *= inversesqrt(dist);
//nxdir = pow(dot(world_normal, dir) * 0.5 + 0.5, 2.0);
nxdir = max(0.0, dot(world_normal, dir));
scale = max(0.0, 1.0 - dist * light_position.w);
diffuse_color = light_color.rgb * scale * nxdir;
specular_color = vec3(0.0);
</source>
   <version>120</version>
   <shader_types>vertex</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

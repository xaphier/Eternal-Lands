<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>parallax_slope_mapping</name>
 <type>normal_mapping</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <name>fragment_normal</name>
     <type>vec3</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>fragment_uv</name>
     <type>vec2</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>normal_sampler_0</name>
     <type>sampler2D</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>tbn_matrix</name>
     <type>mat3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_uv</name>
     <type>vec2</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_view_direction</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
   </parameters>
   <source>vec4 normal;
vec3 uv, view_dir;
float h;
int i;
const vec2 scale_bias = vec2(0.06, -0.03);

view_dir = transpose(tbn_matrix) * world_view_dir.xyz;
uv = vec3(world_uv, 0.0);

for (i = 0; i &lt; 3; i++)
{
	normal = texture2D(normal_sampler_0, uv.xy);
	normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));
	h = normal.a * scale_bias.x + scale_bias.y;
	uv += (h - uv.z) * normal.z * view_dir;
}

normal.xyz = normalize(tbn_matrix * normal.xyz);
fragment_normal = normal.xyz;
fragment_uv = uv.xy;
</source>
   <version>120</version>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <name>fragment_normal</name>
     <type>vec3</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>fragment_uv</name>
     <type>vec2</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>normal_sampler_0</name>
     <type>sampler2D</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>tbn_matrix</name>
     <type>mat3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_uv</name>
     <type>vec2</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_view_direction</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
   </parameters>
   <source>vec4 normal;
vec3 uv, view_dir;
float h;
int i;
const vec2 scale_bias = vec2(0.06, -0.03);

view_dir = transpose(tbn_matrix) * world_view_dir.xyz;
uv = vec3(world_uv, 0.0);

for (i = 0; i &lt; 3; i++)
{
	normal = texture(normal_sampler_0, uv.xy);
	normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));
	h = normal.a * scale_bias.x + scale_bias.y;
	uv += (h - uv.z) * normal.z * view_dir;
}

normal.xyz = normalize(tbn_matrix * normal.xyz);
fragment_normal = normal.xyz;
fragment_uv = uv.xy;
</source>
   <version>120</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

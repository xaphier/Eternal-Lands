<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>relief_mapping</name>
 <types>
  <type>uv_mapping</type>
  <type>normal_mapping</type>
 </types>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_uv</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_4</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>tbn_matrix</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv_ddx_ddy</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_view_direction</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>{
	vec4 data;
	vec3 normal;
	vec2 ddx, ddy;
	float f1, f2, delta, ambient_occlusion_value;

	const float offset_mapping_scale = 0.04;
	const float ambient_occlusion_scale = 40.0;

	ddx = world_uv_ddx_ddy.xy;
	ddx = world_uv_ddx_ddy.xy;

	fragment_uv = world_uv;

	for (int i = 0; i &lt; 4; ++i)
	{
		data =  textureGrad(effect_sampler_4, fragment_uv, ddx, ddy);

		normal = normalize(data.xyz * 2.0 - 1.0);
		normal = normalize(tbn_matrix * normal);

		f2 = dot(normal, world_view_direction.xyz);
		f1 = dot(normal, world_normal);
		f1 = 1.0 - f1 * f1;
		delta = f2 * f1 * offset_mapping_scale * data.a;
		ambient_occlusion_value = 1.0 - ambient_occlusion_scale * delta;

		fragment_uv -= delta;
	}

	data =  textureGrad(effect_sampler_4, fragment_uv, ddx, ddy);

//	normal = normalize(data.xyz * 2.0 - 1.0);
	normal = data.xyz * 2.0 - 1.0;
	normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));
	normal = normalize(tbn_matrix * normal);

	fragment_normal = normal;
}</source>
   <version>140</version>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_uv</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_4</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>tbn_matrix</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv_ddx_ddy</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_view_direction</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>{
	vec4 normal;
	vec2 ddx, ddy;
	float h;
	int i;

	float depth_factor = 0.05;

	ddx = world_uv_ddx_ddy.xy;
	ddx = world_uv_ddx_ddy.xy;

	vec3 V = world_view_direction.xyz;
	float a = dot(tbn_matrix[2], -V);
	vec2 s = vec2(dot(V, tbn_matrix[0]), dot(V, tbn_matrix[1]));
	s *= depth_factor / a;
	vec2 ds = s;
	vec2 dp = world_uv;

   const int linear_search_steps = 50;

   float size = 1.0 / float(linear_search_steps);
   float depth = 0.0;
   float best_depth = 1.0;

	for(int i = 0; i &lt; linear_search_steps - 1; ++i)
	{
		depth += size;
		float t = textureGrad(effect_sampler_4, dp + ds * depth, ddx, ddy).a;
		if(best_depth &gt; 0.996)
		{
			if(depth &gt;= t)
			{
				best_depth = depth;
				break;
			}
		}
	}
   depth = best_depth;

   const int binary_search_steps = 15;

   for(int i = 0; i &lt; binary_search_steps; ++i)
   {
      size *= 0.5;
      float t = textureGrad(effect_sampler_4, dp + ds * depth, ddx, ddy).a;
      if(depth &gt;= t)
      {
         best_depth = depth;
         depth -= 2.0 * size;
      }
      depth += size;
   }

	float d = best_depth;

	vec2 uv = dp + ds * d;

	normal = textureGrad(effect_sampler_4, uv.xy, ddx, ddy) * 2.0 - 1.0;
	normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));
	normal.xyz = normalize(vec3(0.0, 0.0, 1.0) + normal.xyz);
	normal.xyz = normalize(tbn_matrix * normal.xyz);
	fragment_normal = normal.xyz;
	fragment_uv = uv.xy;
}
</source>
   <version>130</version>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_uv</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_4</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>tbn_matrix</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_view_direction</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>
{
	vec4 normal;
	float h;
	int i;

	float depth_factor = 0.05;

	vec3 V = world_view_direction.xyz;
	float a = dot(tbn_matrix[2], -V);
	vec2 s = vec2(dot(V, tbn_matrix[0]), dot(V, tbn_matrix[1]));
	s *= depth_factor / a;
	vec2 ds = s;
	vec2 dp = world_uv;

   const int linear_search_steps = 15;

   float size = 1.0 / float(linear_search_steps);
   float depth = 0.0;
   float best_depth = 1.0;

   for(int i = 0; i &lt; linear_search_steps - 1; ++i)
   {
      depth += size;
      float t = 1.0 - texture2D(effect_sampler_4, dp + ds * depth).a;
      if(best_depth &gt; 0.996)
         if(depth &gt;= t)
            best_depth = depth;
   }
   depth = best_depth;

   const int binary_search_steps = 6;

   for(int i = 0; i &lt; binary_search_steps; ++i)
   {
      size *= 0.5;
      float t = 1.0 - texture2D(effect_sampler_4, dp + ds * depth).a;
      if(depth &gt;= t)
      {
         best_depth = depth;
         depth -= 2.0 * size;
      }
      depth += size;
   }

	float d = best_depth;

	vec2 uv = dp + ds * d;

	normal = texture2D(effect_sampler_4, uv.xy);
	normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));
	normal.xyz = normalize(tbn_matrix * normal.xyz);
	fragment_normal = normal.xyz;
	fragment_uv = uv.xy;
}
</source>
   <version>120</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

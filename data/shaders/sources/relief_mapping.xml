<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>relief_mapping</name>
 <type>normal_mapping</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <name>tbn_matrix</name>
     <source></source>
     <type>mat3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_view_direction</name>
     <source></source>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>normal_sampler_0</name>
     <source></source>
     <type>sampler2D</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>fragment_normal</name>
     <source></source>
     <type>vec3</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>fragment_uv</name>
     <source></source>
     <type>vec2</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_uv</name>
     <source></source>
     <type>vec2</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
   </parameters>
   <source>{
	vec4 normal;
	float h;
	int i;

	float depth_factor = 0.05;

	vec3 V = world_view_direction.xyz;
	float a = dot(tbn_matrix[2], -V);
	vec2 s = vec2(dot(V, tbn_matrix[0]), dot(V, tbn_matrix[1]));
	s *= depth_factor / a;
	vec2 ds = s;
	vec2 dp = world_uv;

   const int linear_search_steps = 15;

   float size = 1.0 / float(linear_search_steps);
   float depth = 0.0;
   float best_depth = 1.0;

   for(int i = 0; i &lt; linear_search_steps - 1; ++i)
   {
      depth += size;
      float t = 1.0 - texture2D(normal_sampler_0, dp + ds * depth).a;
      if(best_depth &gt; 0.996)
         if(depth &gt;= t)
            best_depth = depth;
   }
   depth = best_depth;

   const int binary_search_steps = 6;

   for(int i = 0; i &lt; binary_search_steps; ++i)
   {
      size *= 0.5;
      float t = 1.0 - texture2D(normal_sampler_0, dp + ds * depth).a;
      if(depth &gt;= t)
      {
         best_depth = depth;
         depth -= 2.0 * size;
      }
      depth += size;
   }

	float d = best_depth;

	vec2 uv = dp + ds * d;

	normal = texture2D(normal_sampler_0, uv.xy);
	normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));
	normal.xyz = normalize(tbn_matrix * normal.xyz);
	fragment_normal = normal.xyz;
	fragment_uv = uv.xy;
}
</source>
   <glsl_120>true</glsl_120>
   <glsl_130>false</glsl_130>
   <glsl_140>false</glsl_140>
   <glsl_150>false</glsl_150>
   <glsl_330>false</glsl_330>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <name>tbn_matrix</name>
     <source></source>
     <type>mat3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_view_direction</name>
     <source></source>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>normal_sampler_0</name>
     <source></source>
     <type>sampler2D</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>fragment_normal</name>
     <source></source>
     <type>vec3</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>fragment_uv</name>
     <source></source>
     <type>vec2</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_uv</name>
     <source></source>
     <type>vec2</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
   </parameters>
   <source>{
	vec4 normal;
	float h;
	int i;

	float depth_factor = 0.05;

	vec3 V = world_view_direction.xyz;
	float a = dot(tbn_matrix[2], -V);
	vec2 s = vec2(dot(V, tbn_matrix[0]), dot(V, tbn_matrix[1]));
	s *= depth_factor / a;
	vec2 ds = s;
	vec2 dp = world_uv;

   const int linear_search_steps = 15;

   float size = 1.0 / float(linear_search_steps);
   float depth = 0.0;
   float best_depth = 1.0;

   for(int i = 0; i &lt; linear_search_steps - 1; ++i)
   {
      depth += size;
      float t = 1.0 - texture(normal_sampler_0, dp + ds * depth).a;
      if(best_depth &gt; 0.996)
         if(depth &gt;= t)
            best_depth = depth;
   }
   depth = best_depth;

   const int binary_search_steps = 6;

   for(int i = 0; i &lt; binary_search_steps; ++i)
   {
      size *= 0.5;
      float t = 1.0 - texture(normal_sampler_0, dp + ds * depth).a;
      if(depth &gt;= t)
      {
         best_depth = depth;
         depth -= 2.0 * size;
      }
      depth += size;
   }

	float d = best_depth;

	vec2 uv = dp + ds * d;

	normal = texture(normal_sampler_0, uv.xy);
	normal.z = 1.0 - sqrt(dot(normal.xy, normal.xy));
	normal.xyz = normalize(tbn_matrix * normal.xyz);
	fragment_normal = normal.xyz;
	fragment_uv = uv.xy;
}
</source>
   <glsl_120>false</glsl_120>
   <glsl_130>true</glsl_130>
   <glsl_140>true</glsl_140>
   <glsl_150>true</glsl_150>
   <glsl_330>true</glsl_330>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

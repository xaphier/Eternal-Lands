<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>simple-terrain</name>
 <type>world_tangent_transformation</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <vertex_semantic>morph_normal</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>morph_position</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>position</vertex_semantic>
    </parameter>
    <parameter>
     <name>terrain_texture_coordinate</name>
     <type>vec2</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_tangent</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <auto_parameter>world_transformation</auto_parameter>
    </parameter>
   </parameters>
   <source>vec2 fenc;
float f, g;

world_position = morph_position.xyz;
world_position.xy = world_position.xy * 2.0 - 1.0;
world_position = world_position * terrain_vector_scale + position.xyz;

world_normal = decode_normal(morph_normal.xy);
world_tangent = vec4(world_normal, 1.0);

world_position = vec4(world_position, 1.0) * world_transformation;
world_normal = normalize(world_normal * mat3(world_transformation));
world_tangent.xyz = normalize(world_tangent.xyz * mat3(world_transformation));
terrain_texture_coordinate = position.xy + (world_transformation[0].w, world_transformation[1].w);
</source>
   <version>120</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

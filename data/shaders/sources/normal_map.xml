<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>normal_map</name>
 <type>main_effect</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <auto_parameter>layers</auto_parameter>
    </parameter>
    <parameter>
     <common_parameter>output_data_float</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>float tl, l, bl, t, b, tr, r, br, dx, dy;
/*
tl = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2( 1, -1)).a;
l = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2( 1,  0)).a;
bl = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2( 1,  1)).a;

t = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2( 0, -1)).a;
b = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2( 0,  1)).a;

tr = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2(-1, -1)).a;
r = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2(-1,  0)).a;
br = textureOffset(effect_sampler_0, vec3(world_uv, 0.0), ivec2(-1,  1)).a;
*/
vec4  terrain_texture_size = vec4(1.0 / 1024.0);

tl = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2( 1, -1), layers.x), 0.0).a;
l = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2( 1,  0), layers.x), 0.0).a;
bl = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2( 1,  1), layers.x), 0.0).a;

t = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2( 0, -1), layers.x), 0.0).a;
b = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2( 0,  1), layers.x), 0.0).a;

tr = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2(-1, -1), layers.x), 0.0).a;
r = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2(-1,  0), layers.x), 0.0).a;
br = textureLod(effect_sampler_0, vec3(world_uv + terrain_texture_size.zw * vec2(-1,  1), layers.x), 0.0).a;

dx = tr + 2*r + br - tl - 2*l - bl;
dy = bl + 2*b + br - tl - 2*t - tr;

output_data_float[0] = vec4(normalize(vec3(dx, dy, 0.5)), 1.0);
</source>
   <version>130</version>
   <shader_types>fragment</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="9">
<shader_source class_id="0" tracking_level="0" version="1">
	<px class_id="1" tracking_level="1" version="0" object_id="_0">
		<types class_id="2" tracking_level="0" version="0">
			<count>1</count>
			<item_version>0</item_version>
			<item>2</item>
		</types>
		<name class_id="3" tracking_level="0" version="0">
			<str>bone_animation</str>
		</name>
		<datas class_id="4" tracking_level="0" version="0">
			<count>2</count>
			<item_version>0</item_version>
			<item class_id="5" tracking_level="0" version="0">
				<parameters class_id="6" tracking_level="0" version="0">
					<count>10</count>
					<item_version>0</item_version>
					<item class_id="7" tracking_level="0" version="0">
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>bone_index</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>bone_weight</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>bones</str>
						</name>
						<type>18</type>
						<qualifier>0</qualifier>
						<size>2</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>normal</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>position</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>tangent</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_normal</str>
						</name>
						<type>14</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_position</str>
						</name>
						<type>14</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_tangent</str>
						</name>
						<type>14</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_transformation</str>
						</name>
						<type>18</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
				</parameters>
				<version>2</version>
				<source>
					<str>mat2x4 dual, m;
vec4 pivot;

m = bones[int(bone_index.x)];
dual = m * bone_weight.x;
pivot = m[0];

m = bones[int(bone_index.y)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.y;
}
else
{
	dual += m * bone_weight.y;
}

m = bones[int(bone_index.z)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.z;
}
else
{
	dual += m * bone_weight.z;
}

m = bones[int(bone_index.w)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.w;
}
else
{
	dual += m * bone_weight.w;
}

dual *= inversesqrt(dot(dual[0], dual[0]));

world_position = position.xyz;
world_normal = normal.xyz;
world_tangent = tangent.xyz;

world_position += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_position) + dual[0].w * world_position);
world_position += 2.0 * (dual[0].w * dual[1].xyz - dual[1].w * dual[0].xyz + cross(dual[0].xyz, dual[1].xyz)) ;
world_normal += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_normal) + dual[0].w * world_normal);
world_tangent += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_tangent) + dual[0].w * world_tangent);

world_position += 2.0 * cross(world_transformation[0].xyz, cross(world_transformation[0].xyz, world_position) + world_transformation[0].w * world_position);
world_position *= world_transformation[1].w;
world_position += world_transformation[1].xyz;
world_normal += 2.0 * cross(world_transformation[0].xyz, cross(world_transformation[0].xyz, world_normal) + world_transformation[0].w * world_normal);
world_tangent += 2.0 * cross(world_transformation[0].xyz, cross(world_transformation[0].xyz, world_tangent) + transformationation[0].w * world_tangent);
</str>
				</source>
			</item>
			<item>
				<parameters>
					<count>10</count>
					<item_version>0</item_version>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>bone_index</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>bone_weight</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>bones</str>
						</name>
						<type>18</type>
						<qualifier>0</qualifier>
						<size>2</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>normal</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>position</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>tangent</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_normal</str>
						</name>
						<type>14</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_position</str>
						</name>
						<type>14</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_tangent</str>
						</name>
						<type>14</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>bone_animation_world_tangent_transformation</str>
						</source>
						<name>
							<str>world_transformation</str>
						</name>
						<type>18</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
				</parameters>
				<version>0</version>
				<source>
					<str>mat2x4 dual, m;
vec4 pivot;

m = bones[int(bone_index.x)];
dual = m * bone_weight.x;
pivot = m[0];

m = bones[int(bone_index.y)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.y;
}
else
{
	dual += m * bone_weight.y;
}

m = bones[int(bone_index.z)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.z;
}
else
{
	dual += m * bone_weight.z;
}

m = bones[int(bone_index.w)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.w;
}
else
{
	dual += m * bone_weight.w;
}

dual *= inversesqrt(dot(dual[0], dual[0]));

world_position = position.xyz;
world_normal = normal.xyz;
world_tangent = tangent.xyz;

world_position += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_position) + dual[0].w * world_position);
world_position += 2.0 * (dual[0].w * dual[1].xyz - dual[1].w * dual[0].xyz + cross(dual[0].xyz, dual[1].xyz)) ;
world_normal += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_normal) + dual[0].w * world_normal);
world_tangent += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_tangent) + dual[0].w * world_tangent);

world_position += 2.0 * cross(world_transformation[0].xyz, cross(world_transformation[0].xyz, world_position) + world_transformation[0].w * world_position);
world_position *= world_transformation[1].w;
world_position += world_transformation[1].xyz;
world_normal += 2.0 * cross(world_transformation[0].xyz, cross(world_transformation[0].xyz, world_normal) + world_transformation[0].w * world_normal);
world_tangent += 2.0 * cross(world_transformation[0].xyz, cross(world_transformation[0].xyz, world_tangent) + transformationation[0].w * world_tangent);
</str>
				</source>
			</item>
		</datas>
	</px>
</shader_source>
</boost_serialization>


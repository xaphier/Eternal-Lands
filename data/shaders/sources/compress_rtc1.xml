<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>compress_rtc1</name>
 <type>main_effect</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>output_data_uint</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
   </parameters>
   <source>uvec4 remap(const int uvec4 k)
{
	return (k == 0)? 1 : (k == 7)? 0 : 8 - k;
}

vec4 block0, block1, block2, block3;
ivec2 uv;
int i, j;

uv = ivec2(gl_FragCoord.xy) * 4;

block0.x = texelFetch(effect_sampler_0, uv + ivec(0, 0), 0);
block0.y = texelFetch(effect_sampler_0, uv + ivec(0, 1), 0);
block0.z = texelFetch(effect_sampler_0, uv + ivec(1, 0), 0);
block0.w = texelFetch(effect_sampler_0, uv + ivec(1, 1), 0);

block1.x = texelFetch(effect_sampler_0, uv + ivec(4, 0), 0);
block1.y = texelFetch(effect_sampler_0, uv + ivec(4, 1), 0);
block1.z = texelFetch(effect_sampler_0, uv + ivec(5, 0), 0);
block1.w = texelFetch(effect_sampler_0, uv + ivec(5, 1), 0);

block2.x = texelFetch(effect_sampler_0, uv + ivec(0, 4), 0);
block2.y = texelFetch(effect_sampler_0, uv + ivec(0, 5), 0);
block2.z = texelFetch(effect_sampler_0, uv + ivec(1, 4), 0);
block2.w = texelFetch(effect_sampler_0, uv + ivec(1, 5), 0);

block3.x = texelFetch(effect_sampler_0, uv + ivec(4, 4), 0);
block3.y = texelFetch(effect_sampler_0, uv + ivec(4, 5), 0);
block3.z = texelFetch(effect_sampler_0, uv + ivec(5, 4), 0);
block3.w = texelFetch(effect_sampler_0, uv + ivec(5, 5), 0);

// Find the Min and Max values
vec4 lo4 = min(min(block0, block1), min(block2, block3));
vec4 hi4 = max(max(block0, block1), max(block2, block3));
float lo = min(min(lo4.x, lo4.y), min(lo4.z, lo4.w));
float hi = max(max(hi4.x, hi4.y), max(hi4.z, hi4.w));

// Compute interpolation factors in this range for each sample, and then remap to BC4 indices.
float invDiff = 7.0f / (hi - lo);
float loDiff = 0.5f - lo * invDiff;
uvec4 i0 = remap(uint4(block0 * invDiff + loDiff));
uvec4 i1 = remap(uint4(block1 * invDiff + loDiff));
uvec4 i2 = remap(uint4(block2 * invDiff + loDiff));
uvec4 i3 = remap(uint4(block3 * invDiff + loDiff));

// Assemble the 64bits of compressed data and return as two unsigned integers.
output_data_uint[0].r = uint(hi) | (uint(lo) &lt;&lt; 8) | (i0.x &lt;&lt; 16) | (i0.y &lt;&lt; 19) | (i1.x &lt;&lt; 22) | (i1.y &lt;&lt; 25) | (i0.z &lt;&lt; 28) | (i0.w &lt;&lt; 31);
output_data_uint[0].g = (i0.w &gt;&gt;  1) | (i1.z &lt;&lt;  2) | (i1.w &lt;&lt;  5) | (i2.x &lt;&lt;  8) | (i2.y &lt;&lt; 11) | (i3.x &lt;&lt; 14) | (i3.y &lt;&lt; 17) | (i2.z &lt;&lt; 20) | (i2.w &lt;&lt; 23) | (i3.z &lt;&lt; 26) | (i3.w &lt;&lt; 29);

output_data_uint[0].ba = uvec2(0.0, 1.0);
</source>
   <version>130</version>
   <shader_types>fragment</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

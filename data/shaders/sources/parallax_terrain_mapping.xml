<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>parallax-terrain-mapping</name>
 <type>main_effect</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_1</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <common_parameter>emission</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>specular</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>tbn_matrix</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>terrain_uvs</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_view_direction</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec4 tmp;
vec2 ddx, ddy;
float lod, blend;
float det, squared_length_major, length_major;
float ratio_of_anisotropy, length_minor;
int i, index;

ddx = dFdx(world_uv);
ddy = dFdy(world_uv);

squared_length_major = max(dot(ddx, ddx), dot(ddy, ddy));
det = abs(ddx.x * ddy.y - ddx.y * ddy.x);
length_major = sqrt(squared_length_major);
ratio_of_anisotropy = squared_length_major / det;
length_minor = max((ratio_of_anisotropy &gt; 16.0) ? length_major / ratio_of_anisotropy : det / length_major, 1.0);
lod = log2(length_minor);

ddx = dFdx(terrain_uvs[0]);
ddy = dFdy(terrain_uvs[0]);

index = clipmap_terrain_slices - 1;

for (i = 0; i &lt; (clipmap_terrain_slices - 1); ++i)
{
	if (all(lessThan(abs(terrain_uvs[i] - vec2(0.5)), vec2(0.4995))))
	{
		index = i;
		break;
	}
}

lod = clamp(lod, index, clipmap_terrain_slices - 1);
index = int(lod);
blend = fract(lod);

ddx /= exp2(index);
ddy /= exp2(index);

vec4 normal;
vec3 uv, view_dir;
float h;

const vec2 scale_bias = vec2(0.06, -0.03) * 0.05 / (index + 1);

view_dir = vec3(world_view_direction.xyz * mat2x3(tbn_matrix), -1.0);
uv = vec3(terrain_uvs[index], 0.0);
/*
for (i = 0; i &lt; 4; i++)
{
	normal.xy = textureGrad(effect_sampler_1, vec3(uv.xy, index), ddx, ddy).rg;
	normal.xy = normal.xy * 2.0 - 1.0;
	normal.z = sqrt(1.0 - dot(normal.xy, normal.xy));
	albedo = textureGrad(effect_sampler_0, vec3(uv.xy, index), ddx, ddy);
	normal.a = albedo.a;
	h = normal.a * scale_bias.x + scale_bias.y;
	uv += (h - uv.z) * normal.z * view_dir;
}
*/

normal.xy = textureGrad(effect_sampler_1, vec3(terrain_uvs[index], index), ddx, ddy).rg;
normal.xy = normal.xy * 2.0 - 1.0;
normal.z = sqrt(1.0 - dot(normal.xy, normal.xy));

albedo = textureGrad(effect_sampler_0, vec3(terrain_uvs[index], index), ddx, ddy);

emission = vec3(0.0);
specular = vec3(0.0);

fragment_normal = tbn_matrix * normal.xyz;</source>
   <version>130</version>
   <shader_types>fragment</shader_types>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler3D</type>
    </parameter>
    <parameter>
     <common_parameter>emission</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>specular</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>terrain_uvs</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec2 tmp;
int i, index;

index = clipmap_terrain_slices - 1;
tmp = terrain_uvs[clipmap_terrain_slices - 1];

for (i = clipmap_terrain_slices - 2; i &gt;= 0; --i)
{
	if (all(lessThan(abs(terrain_uvs[i] - vec2(0.5)), vec2(0.4995))))
	{
		if (i &lt; index)
		{
			index = i;
			tmp = terrain_uvs[i];
		}
	}
}

albedo = texture3D(effect_sampler_0, vec3(terrain_uvs[index],
	(index + 0.5) / clipmap_terrain_slices));
emission = vec3(0.0);
specular = vec3(0.0);
fragment_normal = normalize(world_normal);</source>
   <version>120</version>
   <shader_types>fragment</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

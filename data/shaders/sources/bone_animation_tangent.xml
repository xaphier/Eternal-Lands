<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>bone_animation</name>
 <type>world_tangent_transformation</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <vertex_semantic>bone_index</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>bone_weight</vertex_semantic>
    </parameter>
    <parameter>
     <auto_parameter>bones</auto_parameter>
    </parameter>
    <parameter>
     <vertex_semantic>normal</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>position</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>tangent</vertex_semantic>
    </parameter>
    <parameter>
     <auto_parameter>time</auto_parameter>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_tangent</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <auto_parameter>world_transformation</auto_parameter>
    </parameter>
   </parameters>
   <source>mat2x4 dual, m;
vec4 pivot;

m = bones[int(bone_index.x)];
dual = m * bone_weight.x;
pivot = m[0];

m = bones[int(bone_index.y)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.y;
}
else
{
	dual += m * bone_weight.y;
}

m = bones[int(bone_index.z)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.z;
}
else
{
	dual += m * bone_weight.z;
}

m = bones[int(bone_index.w)];

if (dot(pivot, m[0]) &lt; 0.0)
{
	dual -= m * bone_weight.w;
}
else
{
	dual += m * bone_weight.w;
}

dual *= inversesqrt(dot(dual[0], dual[0]));

world_position = position.xyz;
world_normal = normal.xyz;
world_tangent = tangent;

world_position += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_position) + dual[0].w * world_position);
world_position += 2.0 * (dual[0].w * dual[1].xyz - dual[1].w * dual[0].xyz + cross(dual[0].xyz, dual[1].xyz)) ;
world_normal += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_normal) + dual[0].w * world_normal);
world_tangent.xyz += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_tangent.xyz) + dual[0].w * world_tangent.xyz);
world_position += world_normal * abs(fract(time * 0.1f) - 0.5)  * 0.03;

world_position = vec4(world_position, 1.0) * world_transformation;
world_normal = normalize(world_normal * mat3(world_transformation));
world_tangent.xyz = normalize(world_tangent.xyz * mat3(world_transformation));
world_tangent.w = step(0.0, world_tangent.w) * 2.0 - 1.0;
</source>
   <version>120</version>
   <shader_types>vertex</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

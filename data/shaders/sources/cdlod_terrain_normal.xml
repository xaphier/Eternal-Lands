<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>cdlod-terrain</name>
 <type>world_normal_transformation</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <auto_parameter>dudv_scale_offset</auto_parameter>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_10</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_8</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_9</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <vertex_semantic>instance_data_0</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>instance_data_1</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>position</vertex_semantic>
    </parameter>
    <parameter>
     <auto_parameter>terrain_lod_offset</auto_parameter>
    </parameter>
    <parameter>
     <auto_parameter>terrain_scale</auto_parameter>
    </parameter>
    <parameter>
     <name>terrain_texture_coordinate</name>
     <type>vec2</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
   </parameters>
   <source>vec3 vertex_position, morph_position;
vec2 fenc, vertex_uv, morph_dir;
float f, g, morph, dist;

morph_dir = fract(position.xy * 0.5) * instance_data_0.w;
vertex_uv = instance_data_0.xy + position.xy * instance_data_0.z;
morph_position = vec3(vertex_uv * terrain_lod_offset.w, 0);
vertex_position = morph_position;
morph_position.xy += decode_terrain_displacement(textureLod(effect_sampler_8, vertex_uv, 0.0)).xy;
dist = length(morph_position + terrain_lod_offset.xyz);
morph = clamp(dist * instance_data_1.x + instance_data_1.y, 0.0, 1.0);
vertex_uv += morph_dir * morph;
vertex_uv *= terrain_lod_offset.w;
vertex_position = vec3(vertex_uv, 0.0);
vertex_uv *= terrain_scale.zw;
terrain_texture_coordinate = vertex_position.xy;
vertex_position += decode_terrain_displacement(textureLod(effect_sampler_8, vertex_uv, 0.0));
world_position = vertex_position;

world_normal = decode_normal(textureLod(effect_sampler_9, vertex_uv, instance_data_1.z + morph).rg);

terrain_texture_coordinate += textureLod(effect_sampler_10, vertex_uv, instance_data_1.z + morph).rg * dudv_scale_offset.xy + dudv_scale_offset.zw;
</source>
   <version>130</version>
   <shader_types>vertex</shader_types>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <vertex_semantic>normal</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>position</vertex_semantic>
    </parameter>
    <parameter>
     <name>terrain_texture_coordinate</name>
     <type>vec2</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
   </parameters>
   <source>world_position = position.xyz;
world_normal = normal.xyz;
terrain_texture_coordinate = position.xy;
</source>
   <version>120</version>
   <shader_types>vertex</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

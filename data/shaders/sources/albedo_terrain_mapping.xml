<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>terrain</name>
 <types>
  <type>albedo_mapping</type>
 </types>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <common_parameter>terrain_uv_ddx_ddy</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>terrain_uvs</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv_ddx_ddy</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec4 tmp;
vec2 uv, ddx, ddy;
float lod, blend;
float det, squared_length_major, length_major;
float ratio_of_anisotropy, length_minor;
int i, index;

ddx = world_uv_ddx_ddy.xy;
ddy = world_uv_ddx_ddy.zw;

squared_length_major = max(dot(ddx, ddx), dot(ddy, ddy));
det = abs(ddx.x * ddy.y - ddx.y * ddy.x);
length_major = sqrt(squared_length_major);
ratio_of_anisotropy = squared_length_major / det;
length_minor = max((ratio_of_anisotropy &gt; 16.0) ? length_major / ratio_of_anisotropy : det / length_major, 1.0);
lod = log2(length_minor);

ddx = terrain_uv_ddx_ddy.xy;
ddy = terrain_uv_ddx_ddy.zw;

index = clipmap_slices - 1;

for (i = 0; i &lt; (clipmap_slices - 1); ++i)
{
	uv = terrain_uvs[i];

	if (all(lessThan(abs(uv - vec2(0.5)), vec2(0.4995))))
	{
		index = i;
		break;
	}
}

lod = clamp(lod, index, clipmap_slices - 1);
index = int(lod);
blend = fract(lod);

ddx /= exp2(index);
ddy /= exp2(index);

albedo = textureGrad(effect_sampler_0, vec3(terrain_uvs[index], index), ddx, ddy);
ddx *= 0.5;
ddy *= 0.5;
tmp = textureGrad(effect_sampler_0, vec3(terrain_uvs[index + 1], index + 1), ddx, ddy);
albedo = mix(albedo, tmp, blend);
</source>
   <version>130</version>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler3D</type>
    </parameter>
    <parameter>
     <common_parameter>terrain_uvs</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec2 tmp;
int i, index;

index = clipmap_slices - 1;
tmp = terrain_uvs[clipmap_slices - 1];

for (i = clipmap_slices - 2; i &gt;= 0; --i)
{
	if (all(lessThan(abs(terrain_uvs[i] - vec2(0.5)), vec2(0.4995))))
	{
		if (i &lt; index)
		{
			index = i;
			tmp = terrain_uvs[i];
		}
	}
}

albedo = texture3D(effect_sampler_0, vec3(terrain_uvs[index], (index + 0.5) / clipmap_slices));
</source>
   <version>120</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>filtered_esm</name>
 <type>shadow_mapping</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>shadow</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <auto_parameter>shadow_camera</auto_parameter>
    </parameter>
    <parameter>
     <sampler_parameter>shadow_sampler</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <name>shadow_uv</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>3</size>
    </parameter>
    <parameter>
     <auto_parameter>split_distances</auto_parameter>
    </parameter>
    <parameter>
     <common_parameter>view_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec2 uv;
float occluder, light_distance;
int index;

const float depth_scale = 1.0;
const float light_shadow_bias = 0.0;
const float over_darkening_factor = 10.0;

index = int(dot(step(split_distances.xy, -view_position.zz), vec2(1.0)));

uv = shadow_uv[index].xy / shadow_uv[index].w;

occluder  = texture(shadow_sampler, vec3(uv + vec2(-0.5, -0.5), index)).r;
occluder += texture(shadow_sampler, vec3(uv + vec2( 1.5, -0.5), index)).r;
occluder += texture(shadow_sampler, vec3(uv + vec2(-0.5,  1.5), index)).r;
occluder += texture(shadow_sampler, vec3(uv + vec2( 1.5,  1.5), index)).r;
occluder *= 0.25;

// compute distance from current fragment to the main light
light_distance = depth_scale * distance(shadow_camera.xyz, world_position);

//shadow = occluder / exp(over_darkening_factor * light_distance);
//shadow = occluder / exp(light_distance);

shadow = exp(over_darkening_factor * (log(occluder) - light_distance));

shadow = clamp(shadow, 0.0, 1.0);
</source>
   <version>130</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

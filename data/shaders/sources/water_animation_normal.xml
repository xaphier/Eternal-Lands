<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>water_animation</name>
 <type>world_normal_transformation</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <sampler_parameter>effect_sampler_1</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_2</sampler_parameter>
     <type>sampler2DRect</type>
    </parameter>
    <parameter>
     <vertex_semantic>position</vertex_semantic>
    </parameter>
    <parameter>
     <auto_parameter>time</auto_parameter>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <auto_parameter>world_transformation</auto_parameter>
    </parameter>
   </parameters>
   <source>mat2 rotation;
	vec4 sample;
	vec2 offset, ff, flow_dir, flow_uv, uv;
	float h0, h1, h2, h3, h4, h5, h6;
	int i;

	world_position = vec4(position.xyz, 1.0) * world_transformation;
	uv = world_position.xy * 0.05;
	flow_uv = world_position.xy - 0.5;

	// ff is the factor that blends the tiles.
	ff = abs(2.0 * fract(flow_uv) - 1.0) - 0.5;

	// take a third power, to make the area with more or less equal contribution
	// of more tile bigger
	ff = 0.5 - 4.0 * ff * ff * ff;

	sample = textureOffset(effect_sampler_2, flow_uv, ivec2(0, 0));
	flow_dir = (sample.b + 1.0) * normalize(sample.xy - 0.5) * 0.5;
	offset = vec2(time * 0.005, 0.0);// * sample.a;
	// build the rotation matrix that rotates the complete tile
	rotation = mat2(flow_dir.x, -flow_dir.y, flow_dir.y, flow_dir.x);
	world_position.z += textureLod(effect_sampler_1, rotation * uv - offset, 0.0).r * 0.1 - 0.05;

	sample = textureOffset(effect_sampler_2, flow_uv, ivec2(1, 0));
	flow_dir = (sample.b + 1.0) * normalize(sample.xy - 0.5) * 0.5;
	offset = vec2(time * 0.005, 0.0);// * sample.a;
	// build the rotation matrix that rotates the complete tile
	rotation = mat2(flow_dir.x, -flow_dir.y, flow_dir.y, flow_dir.x);
	world_position.z += texture(effect_sampler_1, rotation * uv - offset * 1.06 + 0.62, 0.0).r * 0.1 - 0.05;

	sample = textureOffset(effect_sampler_2, flow_uv, ivec2(0, 1));
	flow_dir = (sample.b + 1.0) * normalize(sample.xy - 0.5) * 0.5;
	offset = vec2(time * 0.005, 0.0);// * sample.a;
	// build the rotation matrix that rotates the complete tile
	rotation = mat2(flow_dir.x, -flow_dir.y, flow_dir.y, flow_dir.x);
	world_position.z += texture(effect_sampler_1, rotation * uv - offset * 1.33 + 0.27, 0.0).r * 0.1 - 0.05;

	sample = textureOffset(effect_sampler_2, flow_uv, ivec2(1, 1));
	flow_dir = (sample.b + 1.0) * normalize(sample.xy - 0.5) * 0.5;
	offset = vec2(time * 0.005, 0.0);// * sample.a;
	// build the rotation matrix that rotates the complete tile
	rotation = mat2(flow_dir.x, -flow_dir.y, flow_dir.y, flow_dir.x);
	world_position.z += texture(effect_sampler_1, rotation * uv - offset * 1.24, 0.0).r * 0.1 - 0.05;

	h4 = mix(h0, h1, ff.x);
	h5 = mix(h2, h3, ff.x);
	h6 = mix(h4, h5, ff.y);

	world_position.z += h6;

	world_normal = vec3(0.0, 0.0, 1.0);
</source>
   <version>140</version>
   <shader_types>vertex</shader_types>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <vertex_semantic>normal</vertex_semantic>
    </parameter>
    <parameter>
     <vertex_semantic>position</vertex_semantic>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <auto_parameter>world_transformation</auto_parameter>
    </parameter>
   </parameters>
   <source>world_position = position.xyz;
world_normal = normal.xyz;

world_position = vec4(world_position, 1.0) * world_transformation;
world_normal = normalize(world_normal * mat3(world_transformation));
</source>
   <version>120</version>
   <shader_types>vertex</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

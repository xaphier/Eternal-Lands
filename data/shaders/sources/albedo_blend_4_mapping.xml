<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>blend_4</name>
 <type>main_effect</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <auto_parameter>blend_sizes</auto_parameter>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_1</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_2</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_3</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_7</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <auto_parameter>material_color</auto_parameter>
    </parameter>
    <parameter>
     <common_parameter>output_data_float</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_extra_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec4 blend, tmp[4], extra_blend, min_blend, max_blend;
vec3 result;
vec2 ddx, ddy, uv;
ivec2 idx;
int i, index;

ddx = dFdx(world_extra_uv);
ddy = dFdy(world_extra_uv);

result = material_color.rgb;

blend = texture(effect_sampler_7, world_uv);

if (any(greaterThan(blend, vec4(0.0))))
{
	uv = world_extra_uv;
/*	idx = ivec2(uv) * ivec2(157, 97);
	index = (idx.x + idx.y) % 8;

	uv.x *= (index &amp; 0x1) * 2 - 1;
	uv.y *= (index &amp; 0x2) - 1;

	if ((index &amp; 0x4) != 0)
	{
		uv.xy = uv.yx;
	}
*/
	tmp[0] = textureGrad(effect_sampler_0, uv, ddx, ddy);
	tmp[1] = textureGrad(effect_sampler_1, uv, ddx, ddy);
	tmp[2] = textureGrad(effect_sampler_2, uv, ddx, ddy);
	tmp[3] = textureGrad(effect_sampler_3, uv, ddx, ddy);

	for (i = 0; i &lt; 4; ++i)
	{
		extra_blend[i] = tmp[i].a;
	}

	min_blend = clamp(extra_blend - blend_sizes[0], 0.0, 1.0);
	max_blend = clamp(extra_blend + blend_sizes[0], 0.0, 1.0);

	blend = smoothstep(min_blend, max_blend, blend);

	for (i = 3; i &gt;= 0; --i)
	{
		result = mix(result, tmp[i].rgb, blend[i]);
	}
}

output_data_float[0].rgb = result;
output_data_float[0].a = 1.0;
</source>
   <version>130</version>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <auto_parameter>blend_sizes</auto_parameter>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_1</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_2</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_3</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_7</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <auto_parameter>material_color</auto_parameter>
    </parameter>
    <parameter>
     <common_parameter>output_data_float</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_extra_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec4 blend, tmp[4], extra_blend;
vec3 result;
int i;

result = material_color.rgb;

blend = texture2D(effect_sampler_7, world_uv);

tmp[0] = texture2D(effect_sampler_0, world_extra_uv);
tmp[1] = texture2D(effect_sampler_1, world_extra_uv);
tmp[2] = texture2D(effect_sampler_2, world_extra_uv);
tmp[3] = texture2D(effect_sampler_3, world_extra_uv);

for (i = 0; i &lt; 4; ++i)
{
	extra_blend[i] = tmp[i].a;
}

blend = smoothstep(extra_blend - blend_sizes[0], extra_blend + blend_sizes[0], blend);

for (i = 3; i &gt;= 0; --i)
{
	result = mix(result, tmp[i].rgb, blend[i]);
}

output_data_float[0].rgb = result;
output_data_float[0].a = 1.0;
</source>
   <version>120</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>blend_4</name>
 <type>albedo_mapping</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_0</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_1</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_2</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_3</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>blend_sampler</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>world_extra_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_extra_uv_ddx_ddy</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv_ddx_ddy</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec4 blend;
vec2 ddx, ddy;

blend = textureGrad(blend_sampler, world_uv, world_uv_ddx_ddy.xy, world_uv_ddx_ddy.zw);

ddx = world_extra_uv_ddx_ddy.xy;
ddy = world_extra_uv_ddx_ddy.zw;

if (all(lessThanEqual(blend, vec4(0.0))))
{
	discard;
}

albedo = textureGrad(albedo_sampler_0, world_extra_uv, ddx, ddy) * blend.r;
albedo += textureGrad(albedo_sampler_1, world_extra_uv, ddx, ddy) * blend.g;
albedo += textureGrad(albedo_sampler_2, world_extra_uv, ddx, ddy) * blend.b;
albedo += textureGrad(albedo_sampler_3, world_extra_uv, ddx, ddy) * blend.a;
</source>
   <version>130</version>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_0</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_1</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_2</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>albedo_sampler_3</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <sampler_parameter>blend_sampler</sampler_parameter>
     <type>sampler2D</type>
    </parameter>
    <parameter>
     <common_parameter>world_extra_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec4 blend;

blend = texture2D(blend_sampler, world_uv);

albedo = texture2D(albedo_sampler_0, world_extra_uv) * blend.r;
albedo += texture2D(albedo_sampler_1, world_extra_uv) * blend.g;
albedo += texture2D(albedo_sampler_2, world_extra_uv) * blend.b;
albedo += texture2D(albedo_sampler_3, world_extra_uv) * blend.a;
</source>
   <version>120</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>esm</name>
 <type>shadow_mapping</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <name>shadow</name>
     <type>float</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>shadow_camera</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>shadow_sampler</name>
     <type>sampler2DArray</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>shadow_uvs</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>shadow_map_count</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_position</name>
     <type>vec3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
   </parameters>
   <source>vec3 uv;
vec2 lod_uv, ddx, ddy;
float occluder, light_distance;
int i;

const float light_shadow_bias = -0.01;
const float over_darkening_factor = 5.0;

shadow = 1.0;

lod_uv = shadow_uvs[shadow_map_count - 1].xy / shadow_uvs[shadow_map_count - 1].w;

ddx = dFdx(lod_uv);
ddy = dFdy(lod_uv);

for (i = 0; i &lt; shadow_map_count; ++i)
{
	uv = shadow_uvs[i].xyz / shadow_uvs[i].w;

	if (all(lessThan(abs(uv - vec3(0.5)), vec3(0.4995))))
	{
		occluder = textureGrad(shadow_sampler, vec3(uv.xy, i), ddx, ddy).r;

		light_distance = abs(shadow_camera.z - world_position.z) + light_shadow_bias;

		shadow = exp(over_darkening_factor * (log(occluder) - light_distance));
		shadow = clamp(shadow, 0.0, 1.0);
		break;
	}
}
</source>
   <version>130</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

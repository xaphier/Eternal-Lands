<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>esm</name>
 <type>shadow_mapping</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>shadow</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>shadow_sampler</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <common_parameter>shadow_uv_ddx_ddy</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>shadow_uvs</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>shadow_view_distance</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec3 uv;
vec2 ddx, ddy;
float occluder, light_distance;
int i;

const float light_shadow_bias = 0.01;
const float over_darkening_factor = 5.0;

shadow = 1.0;

ddx = shadow_uv_ddx_ddy.xy;
ddy = shadow_uv_ddx_ddy.zw;

for (i = 0; i &lt; shadow_maps_count; ++i)
{
	uv = shadow_uvs[i].xyz / shadow_uvs[i].w;

	if (all(lessThan(abs(uv - vec3(0.5)), vec3(0.5))))
	{
		ddx /= exp2(i);
		ddy /= exp2(i);

		occluder = textureGrad(shadow_sampler, vec3(uv.xy, i), ddx, ddy).r;

		light_distance = shadow_view_distance[i] + light_shadow_bias;

		shadow = exp(over_darkening_factor * (log(occluder) - light_distance));
		shadow = clamp(shadow, 0.0, 1.0);
		break;
	}
}
</source>
   <version>130</version>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

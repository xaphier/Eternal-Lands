<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>specular-terrain-mapping</name>
 <type>main_effect</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_1</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_2</sampler_parameter>
     <type>sampler2DArray</type>
    </parameter>
    <parameter>
     <common_parameter>emission</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>gloss</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>specular</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>tbn_matrix</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>terrain_uvs</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_position</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_uv</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_view_direction</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec4 specular_gloss;
vec3 normal;
vec2 ddx, ddy;
int i, index;

ddx = dFdx(terrain_uvs[0]);
ddy = dFdy(terrain_uvs[0]);

index = clipmap_terrain_slices - 1;

for (i = 0; i &lt; (clipmap_terrain_slices - 1); ++i)
{
	if (all(lessThan(abs(terrain_uvs[i] - vec2(0.5)), vec2(0.4995))))
	{
		index = i;
		break;
	}
}

ddx /= exp2(index);
ddy /= exp2(index);

albedo = textureGrad(effect_sampler_0, vec3(terrain_uvs[index], index), ddx, ddy);
normal = vec3(0.0, 0.0, 1.0);
specular_gloss = vec4(0.0);

if (index &lt; 2)
{
	normal.xy = textureGrad(effect_sampler_1, vec3(terrain_uvs[index], index), ddx, ddy).rg;
	normal.z = sqrt(1.0 - dot(normal.xy, normal.xy));
	specular_gloss = textureGrad(effect_sampler_2, vec3(terrain_uvs[index], index), ddx, ddy);
}

specular = specular_gloss.rgb;
gloss = specular_gloss.a;
emission = vec3(0.0);
fragment_normal = tbn_matrix * normal;
</source>
   <version>130</version>
   <shader_types>fragment</shader_types>
  </shader_source_data>
  <shader_source_data>
   <parameters>
    <parameter>
     <common_parameter>albedo</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <sampler_parameter>effect_sampler_0</sampler_parameter>
     <type>sampler3D</type>
    </parameter>
    <parameter>
     <common_parameter>emission</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>fragment_normal</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>gloss</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>specular</common_parameter>
     <qualifier>out</qualifier>
    </parameter>
    <parameter>
     <common_parameter>terrain_uvs</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
    <parameter>
     <common_parameter>world_normal</common_parameter>
     <qualifier>in</qualifier>
    </parameter>
   </parameters>
   <source>vec2 tmp;
int i, index;

index = clipmap_terrain_slices - 1;
tmp = terrain_uvs[clipmap_terrain_slices - 1];

for (i = clipmap_terrain_slices - 2; i &gt;= 0; --i)
{
	if (all(lessThan(abs(terrain_uvs[i] - vec2(0.5)), vec2(0.4995))))
	{
		if (i &lt; index)
		{
			index = i;
			tmp = terrain_uvs[i];
		}
	}
}

albedo = texture3D(effect_sampler_0, vec3(terrain_uvs[index],
	(index + 0.5) / clipmap_terrain_slices));
emission = vec3(0.0);
specular = vec3(0.0);
gloss = 0.0;
fragment_normal = normalize(world_normal);</source>
   <version>120</version>
   <shader_types>fragment</shader_types>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

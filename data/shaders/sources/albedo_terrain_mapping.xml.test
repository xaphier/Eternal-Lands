<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="9">
<shader_source class_id="0" tracking_level="0" version="1">
	<px class_id="1" tracking_level="1" version="0" object_id="_0">
		<types class_id="2" tracking_level="0" version="0">
			<count>1</count>
			<item_version>0</item_version>
			<item>14</item>
		</types>
		<name class_id="3" tracking_level="0" version="0">
			<str>terrain</str>
		</name>
		<datas class_id="4" tracking_level="0" version="0">
			<count>2</count>
			<item_version>0</item_version>
			<item class_id="5" tracking_level="0" version="0">
				<parameters class_id="6" tracking_level="0" version="0">
					<count>6</count>
					<item_version>0</item_version>
					<item class_id="7" tracking_level="0" version="0">
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>albedo</str>
						</name>
						<type>15</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_0</str>
						</name>
						<type>34</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>terrain_uv_ddx_ddy</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>terrain_uvs</str>
						</name>
						<type>13</type>
						<qualifier>0</qualifier>
						<size>4</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>world_position</str>
						</name>
						<type>14</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>world_uv_ddx_ddy</str>
						</name>
						<type>15</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
				</parameters>
				<version>1</version>
				<source>
					<str>vec4 tmp;
vec2 uv, ddx, ddy;
float lod, blend;
float det, squared_length_major, length_major;
float ratio_of_anisotropy, length_minor;
int i, index;

ddx = world_uv_ddx_ddy.xy;
ddy = world_uv_ddx_ddy.zw;

squared_length_major = max(dot(ddx, ddx), dot(ddy, ddy));
det = abs(ddx.x * ddy.y - ddx.y * ddy.x);
length_major = sqrt(squared_length_major);
ratio_of_anisotropy = squared_length_major / det;
length_minor = max((ratio_of_anisotropy &gt; 16.0) ? length_major / ratio_of_anisotropy : det / length_major, 1.0);
lod = log2(length_minor);

ddx = terrain_uv_ddx_ddy.xy;
ddy = terrain_uv_ddx_ddy.zw;

index = clipmap_slices - 1;

for (i = 0; i &lt; (clipmap_slices - 1); ++i)
{
	uv = terrain_uvs[i];

	if (all(lessThan(abs(uv - vec2(0.5)), vec2(0.4995))))
	{
		index = i;
		break;
	}
}

lod = clamp(lod, index, clipmap_slices - 1);
index = int(lod);
blend = fract(lod);

ddx /= exp2(index);
ddy /= exp2(index);

albedo = textureGrad(albedo_sampler_0, vec3(terrain_uvs[index], index), ddx, ddy);
ddx *= 0.5;
ddy *= 0.5;
tmp = textureGrad(albedo_sampler_0, vec3(terrain_uvs[index + 1], index + 1), ddx, ddy);
albedo = mix(albedo, tmp, blend);
</str>
				</source>
			</item>
			<item>
				<parameters>
					<count>4</count>
					<item_version>0</item_version>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>albedo</str>
						</name>
						<type>15</type>
						<qualifier>1</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>albedo_sampler_0</str>
						</name>
						<type>28</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>terrain_uvs</str>
						</name>
						<type>13</type>
						<qualifier>0</qualifier>
						<size>4</size>
						<scale>1</scale>
					</item>
					<item>
						<source>
							<str>terrain_albedo_mapping</str>
						</source>
						<name>
							<str>world_uv</str>
						</name>
						<type>13</type>
						<qualifier>0</qualifier>
						<size>0</size>
						<scale>1</scale>
					</item>
				</parameters>
				<version>0</version>
				<source>
					<str>vec4 tmp;
vec2 uv, ddx, ddy;
float lod, blend;
int i, index;

ddx = dFdx(world_uv);
ddy = dFdy(world_uv);

lod = log2(max(length(ddx), length(ddy)));

index = clipmap_slices - 1;

for (i = clipmap_slices - 2; i &gt;= 0; --i)
{
	uv = terrain_uvs[i];

	if (all(lessThan(abs(uv - vec2(0.5)), vec2(0.4995))))
	{
		index = i;
	}
}

lod = clamp(lod, index, clipmap_slices - 1);
index = int(lod);
blend = fract(lod);

albedo = texture3D(albedo_sampler_0, vec3(terrain_uvs[index], (index + 0.5) / clipmap_slices));
tmp = texture3D(albedo_sampler_0, vec3(terrain_uvs[index + 1], (index + 1.5) / clipmap_slices));
albedo = mix(albedo, tmp, blend);
</str>
				</source>
			</item>
		</datas>
	</px>
</shader_source>
</boost_serialization>


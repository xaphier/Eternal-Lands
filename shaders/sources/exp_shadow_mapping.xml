<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>esm</name>
 <type>shadow_mapping</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <name>shadow_uv</name>
     <source></source>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>shadow_map_count</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>shadow_sampler</name>
     <source></source>
     <type>sampler2DArray</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>split_distances</name>
     <source></source>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>view_position</name>
     <source></source>
     <type>vec3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_position</name>
     <source></source>
     <type>vec3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>shadow_camera</name>
     <source></source>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>shadow_projection_view_matrix</name>
     <source></source>
     <type>mat4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>shadow</name>
     <source></source>
     <type>float</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
   </parameters>
   <source>{
	vec2 uv, scale_offset;
	float occluder, light_distance;
	int index;

	const float light_shadow_bias = -0.01;
	const float over_darkening_factor = 3.0;

	if (shadow_map_count == 1)
	{
		float splits;

		splits = step(split_distances.x, -view_position.z);
		index = 0;
		shadow = splits;
	}
	else if (shadow_map_count == 2)
	{
		vec2 splits;

		splits = step(split_distances.xy, -view_position.zz);
		index = int(splits.x);
		shadow = splits.y;
	}
	else if (shadow_map_count == 3)
	{
		vec3 splits;

		splits = step(split_distances.xyz, -view_position.zzz);
		index = int(splits.x + splits.y);
		shadow = splits.z;
	}
	else if (shadow_map_count == 4)
	{
		vec4 splits;

		splits = step(split_distances.xyzw, -view_position.zzzz);
		index = int(splits.x + splits.y + splits.z);
		shadow = splits.w;
	}

	uv = shadow_uv[index].xy / shadow_uv[index].w;

	vec3 shadow_view = vec3(shadow_projection_view_matrix * vec4(world_position, 1.0));

	occluder = textureGrad(shadow_sampler, vec3(uv, index), dFdx(shadow_view.xy), dFdy(shadow_view.xy)).r;

	// compute distance from current fragment to the main light
	light_distance = distance(shadow_camera.xyz, world_position) + light_shadow_bias;

	shadow += exp(over_darkening_factor * (log(occluder) - light_distance));

	shadow = clamp(shadow, 0.0, 1.0);
}
</source>
   <glsl_120>false</glsl_120>
   <glsl_130>true</glsl_130>
   <glsl_140>true</glsl_140>
   <glsl_150>true</glsl_150>
  </shader_source_data>
 </shader_source_datas>
</shader_source>

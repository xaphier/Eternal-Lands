<?xml version="1.0" encoding="utf8"?>
<shader_source>
 <name>bone_animation</name>
 <type>world_tangent_transform</type>
 <shader_source_datas>
  <shader_source_data>
   <parameters>
    <parameter>
     <name>bone_index</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>bone_weight</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>position</name>
     <type>vec4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>normal</name>
     <type>vec3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>tangent</name>
     <type>vec3</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_transform</name>
     <type>mat2x4</type>
     <qualifier>in</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>bones</name>
     <type>mat2x4</type>
     <qualifier>in</qualifier>
     <size>bone_count</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_position</name>
     <type>vec3</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_normal</name>
     <type>vec3</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
    <parameter>
     <name>world_tangent</name>
     <type>vec3</type>
     <qualifier>out</qualifier>
     <size>one</size>
     <scale>1</scale>
    </parameter>
   </parameters>
   <source>{
	mat2x4 dual, m;
	vec4 pivot;

	m = bones[int(bone_index.x)];
	dual = m * bone_weight.x;
	pivot = m[0];

	m = bones[int(bone_index.y)];

	if (dot(pivot, m[0]) &lt; 0.0)
	{
		dual -= m * bone_weight.y;
	}
	else
	{
		dual += m * bone_weight.y;
	}

	m = bones[int(bone_index.z)];

	if (dot(pivot, m[0]) &lt; 0.0)
	{
		dual -= m * bone_weight.z;
	}
	else
	{
		dual += m * bone_weight.z;
	}

	m = bones[int(bone_index.w)];

	if (dot(pivot, m[0]) &lt; 0.0)
	{
		dual -= m * bone_weight.w;
	}
	else
	{
		dual += m * bone_weight.w;
	}

	dual *= inversesqrt(dot(dual[0], dual[0]));

	world_position = position.xyz;
	world_normal = normal;
	world_tangent = tangent;

	world_position += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_position) + dual[0].w * world_position);
	world_position += 2.0 * (dual[0].w * dual[1].xyz - dual[1].w * dual[0].xyz + cross(dual[0].xyz, dual[1].xyz)) ;
	world_normal += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_normal) + dual[0].w * world_normal);
	world_tangent += 2.0 * cross(dual[0].xyz, cross(dual[0].xyz, world_tangent) + dual[0].w * world_tangent);

	world_position += 2.0 * cross(world_transform[0].xyz, cross(world_transform[0].xyz, world_position) + world_transform[0].w * world_position);
	world_position *= world_transform[1].w;
	world_position += world_transform[1].xyz;
	world_normal += 2.0 * cross(world_transform[0].xyz, cross(world_transform[0].xyz, world_normal) + world_transform[0].w * world_normal);
	world_tangent += 2.0 * cross(world_transform[0].xyz, cross(world_transform[0].xyz, world_tangent) + world_transform[0].w * world_tangent);
}
</source>
   <glsl_120>true</glsl_120>
   <glsl_130>true</glsl_130>
   <glsl_140>true</glsl_140>
   <glsl_150>true</glsl_150>
   <glsl_330>true</glsl_330>
  </shader_source_data>
 </shader_source_datas>
</shader_source>
